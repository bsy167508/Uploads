----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date:    15:10:47 10/18/2016 
-- Design Name: 
-- Module Name:    p2moore - Behavioral 
-- Project Name: 
-- Target Devices: 
-- Tool versions: 
-- Description: 
--
-- Dependencies: 
--
-- Revision: 
-- Revision 0.01 - File Created
-- Additional Comments: 
--
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx primitives in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity p2moore is
    Port ( seq : in  STD_LOGIC;
           clk : in  STD_LOGIC;
           reset : in  STD_LOGIC;
           det_vld : out  STD_LOGIC
	);
end p2moore;

architecture Behavioral of p2moore is
type state is (s0, s1, s2, s3, s4, s5); -- define state as a data type
signal present_state,next_state : state; -- present state and next state are two signals of data type state
begin
	sreg: process(clk, reset) -- seperate process for state register.
	begin
	if (reset='1') then -- asynchronous reset when machine gets turned on
		present_state<=s0;
	elsif clk'event and (clk='1') then -- 
		present_state<=next_state;
	end if;
	end process;

	c1 : process(present_state,seq)
	begin
	case present_state is
	when s0 => 
	if seq='1' then
		next_state<=s1;
	else
		next_state<=s0;
	end if;
	when s1 => 
	if seq='1' then
		next_state<=s2;
	else
		next_state<=s0;
	end if;

	when s2 => 
	if seq='1' then
		next_state<=s2;
	else
		next_state<=s3;
	end if;

	when s3 => 
	if seq='1' then
		next_state<=s1;
	else
		next_state<=s4;
	end if;

	when s4 => 
	if seq='1' then
		next_state<=s5;
	else
		next_state<=s0;
	end if;

	when s5 =>
	if seq='1' then
		next_state<=s1;
	else
		next_state<=s0;

	when others => 
	null;
	end case;
end process;

c2: process(present_state)
begin

if present_state=s5 then
det_vld<='1';
else
det_vld<='0';
end if;

end process;
end Behavioral;

